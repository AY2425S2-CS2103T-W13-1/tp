How to use ScoopBook?

1. Adding a contact: add

Adds a contact to the address book.

Format: add n/NAME [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]

Examples:
- add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01
- add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal

Note:
- The add command must have a name, and one of the following fields: phone number, email, address.
  i.e. add n/Johnny Appleseed does not work because there is no phone number, email or address.
- A person can have any number of tags (including 0).

2. Listing all contacts: list

Shows a list of all contacts in the address book.

Format: list

3. Editing a contact: edit

Edits an existing contact in the address book.

Format: edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]

Note:
- Edits the contact at the specified INDEX. The index refers to the index number shown in the displayed contact list.
  The index must be a positive integer (1, 2, 3, …).
- At least one of the optional fields must be provided.
- Existing values will be updated to the input values.
- When editing tags, the existing tags of the person will be removed (i.e., adding of tags is not cumulative).
- You can remove all the contact’s tags by typing t/ without specifying any tags after it.

Examples:
- edit 1 p/91234567 e/johndoe@example.com edits the phone number and email address of the 1st person to 91234567 and
  johndoe@example.com.
- edit 2 n/Betsy Crower t/ edits the name of the 2nd person to Betsy Crower and clears all existing tags.

4. Locating contacts by name: find

Finds persons whose names contain any of the given keywords.

Format: find KEYWORD [MORE_KEYWORDS]

Note:
- The search is case-insensitive. For example, hans will match Hans.
- The order of the keywords does not matter. For example, Hans Bo will match Bo Hans.
- Only the name is searched.
- Only full words will be matched. For example, Han will not match Hans.
- Persons matching at least one keyword will be returned (OR search). For example, Hans Bo will return Hans Gruber and
  Bo Yang.

5. Deleting a person: delete

Deletes the specified person from the address book.

Format: delete INDEX

Note:
- Deletes the person at the specified INDEX.
- The index refers to the index number shown in the displayed person list.
- The index must be a positive integer (1, 2, 3, …).

Examples:
- list followed by delete 2 deletes the 2nd person in the address book.
- find Betsy followed by delete 1 deletes the 1st person in the results of the find command.

6. Adding tags to a contact: addtag

Adds the tags typed in to the specified person.

Format: addtag INDEX t/TAG1 [t/MORETAGS]

Note:
- Adds the specified tags to the person at the specified INDEX.
- The index refers to the index number shown in the displayed person list.
- The index must be a positive integer 1, 2, 3, …​
- Multiple tags in a single addtag command is supported. i.e. addtag 1 t/friend t/neighbour will tag the 1st person
  with both "friend" and "neighbour".
- Tags can only contain alphanumeric characters (numbers or letters only, no special characters or spaces).

Examples:
- list followed by addtag 2 t/friend tags the 2nd person with "friends" in the address book.
- find Betsy followed by addtag 1 t/friend tags the 1st person in the results of the find command with "friends".

7. Removing tag from a contact: removetag

Removes the specified tag from the person.

Format: removetag INDEX t/TAG1 [t/MORETAGS]

Note:
- Removes the specified tags from the person at the specified INDEX.
- The index refers to the index number shown in the displayed person list.
- The index must be a positive integer 1, 2, 3, …​
- Multiple tags in a single removetag command is supported. i.e. removetag 1 t/friend t/neighbour will remove
  both the "friend" and "neighbour" tag for the 1st person.
- Tags are case sensitive. The typed tag must match the tag on the person exactly. i.e. removetag 1 t/friend will
  not remove the tag "Friend".

Examples:
- list followed by removetag 2 t/friend removes the "friend" tag from the 2nd person in the address book.
- find Betsy followed by removetag 1 t/friend removes the "friend" tag from the 1st person in the results of
  the find command.

8. Finding people with tags: findtag

Find persons who have all of the specified tags.

Format: findtag t/TAG1 [t/MORETAGS]

Note:
- The searching of tags is case-insensitive. e.g friends will match Friends
- The order of the tags does not matter. i.e. As long as the person has the listed tags, they will be shown.
- Only the tags are searched.
- Only full words will be matched e.g. Friend will not match Friends
- Only persons matching all the tags will be returned (i.e. AND search).

Examples:
- findtag t/friends returns people with tag friends, Friends, FriEndS (due to case insensitivity).
- findtag t/friends t/neighbours returns people with tag friends and neighbours only.

9. Opening Note for Person: note

Open a window for the user to add notes to.
If the person at the specified `INDEX` already has a note, the note will be displayed and the user can edit it in
the window.
If no note exists for the person, a new note will be created and displayed in the window for editing.

Format: note INDEX

Note:
- Opens a window for the user to add notes to the person at the specified `INDEX`.
- The index refers to the index number shown in the displayed person list.
- The index must be a positive integer 1, 2, 3, …
- The note will be saved when the window is closed.

10. Deleting Note from Person: deletenote

Deletes the note from the person.

Format: deletenote INDEX

Note:
- Deletes note for the person at the specified INDEX.
- The index refers to the index number shown in the displayed person list.
- The index must be a positive integer 1, 2, 3, …

11. Exporting your contacts: export

Exports the contacts in a .json file to the target path.

Format: export TARGET_PATH

Examples:
- For Windows: export C:/Users/username/Desktop/MyContacts.json saves the json file as MyContacts.json in the
  Users/username/Desktop folder.
- For macOS: export /Users/username/Desktop/MyContacts.json saves the json file as MyContacts.json in the
  Users/username/Desktop folder.
- For Linux: export /home/user/desktop/MyContacts.json saves the json file as MyContacts.json in the
  home/user/desktop folder.
- export Contacts.json saves the json file as Contacts.json in the root folder of where scoopbook.jar is located at.

12. Importing your contacts: import

Imports the external .json file from target path into the application.

Format: import TARGET_PATH

Examples:
- For Windows: import C:/Users/username/Desktop/MyContacts.json imports the json file from MyContacts.json in the
  Users/username/Desktop folder.
- For macOS: import /Users/username/Desktop/MyContacts.json imports the json file from MyContacts.json in the
  Users/username/Desktop folder.
- For Linux: import /home/user/desktop/MyContacts.json imports the json file from MyContacts.json in the
  home/user/desktop folder.
- export Contacts.json imports the json file named Contacts.json in the root folder of where scoopbook.jar
  is located at.

13. Clearing all entries: clear

Warning: this clears all entries from the address book.

Format: clear

14. Exiting the program: exit

Exits the program.

Format: exit
